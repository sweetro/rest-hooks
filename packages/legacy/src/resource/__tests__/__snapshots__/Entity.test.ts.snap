// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Entity denormalization can denormalize already partially denormalized data 1`] = `
Array [
  Menu {
    "food": Food {
      "id": "1",
    },
    "id": "1",
  },
  true,
  false,
  Object {
    "Food": Object {
      "1": Food {
        "id": "1",
      },
    },
    "Menu": Object {
      "1": Menu {
        "food": Food {
          "id": "1",
        },
        "id": "1",
      },
    },
  },
]
`;

exports[`Entity denormalization can denormalize already partially denormalized data 2`] = `
Array [
  Menu {
    "food": Food {
      "id": "1",
    },
    "id": "1",
  },
  true,
  false,
  Object {
    "Food": Object {
      "1": Food {
        "id": "1",
      },
    },
    "Menu": Object {
      "1": Menu {
        "food": Food {
          "id": "1",
        },
        "id": "1",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes an entity 1`] = `
Array [
  Tacos {
    "alias": undefined,
    "id": "1",
    "name": "",
    "type": "foo",
  },
  true,
  false,
  Object {
    "Tacos": Object {
      "1": Tacos {
        "alias": undefined,
        "id": "1",
        "name": "",
        "type": "foo",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes an entity 2`] = `
Array [
  Tacos {
    "alias": undefined,
    "id": "1",
    "name": "",
    "type": "foo",
  },
  true,
  false,
  Object {
    "Tacos": Object {
      "1": Tacos {
        "alias": undefined,
        "id": "1",
        "name": "",
        "type": "foo",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes deep entities 1`] = `
Array [
  Menu {
    "food": Food {
      "id": "1",
    },
    "id": "1",
  },
  true,
  false,
  Object {
    "Food": Object {
      "1": Food {
        "id": "1",
      },
    },
    "Menu": Object {
      "1": Menu {
        "food": Food {
          "id": "1",
        },
        "id": "1",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes deep entities 2`] = `
Array [
  Menu {
    "food": Food {
      "id": "1",
    },
    "id": "1",
  },
  true,
  false,
  Object {
    "Food": Object {
      "1": Food {
        "id": "1",
      },
    },
    "Menu": Object {
      "1": Menu {
        "food": Food {
          "id": "1",
        },
        "id": "1",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes deep entities 3`] = `
Array [
  Menu {
    "food": Food {
      "id": undefined,
    },
    "id": "2",
  },
  true,
  false,
  Object {
    "Menu": Object {
      "2": Menu {
        "food": Food {
          "id": undefined,
        },
        "id": "2",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes deep entities 4`] = `
Array [
  Menu {
    "food": Food {
      "id": undefined,
    },
    "id": "2",
  },
  false,
  false,
  Object {
    "Menu": Object {
      "2": Menu {
        "food": Food {
          "id": undefined,
        },
        "id": "2",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes deep entities with records 1`] = `
Array [
  Menu {
    "food": Food {
      "id": "1",
    },
    "id": "1",
  },
  true,
  false,
  Object {
    "Food": Object {
      "1": Food {
        "id": "1",
      },
    },
    "Menu": Object {
      "1": Menu {
        "food": Food {
          "id": "1",
        },
        "id": "1",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes deep entities with records 2`] = `
Array [
  Menu {
    "food": Food {
      "id": "1",
    },
    "id": "1",
  },
  true,
  false,
  Object {
    "Food": Object {
      "1": Food {
        "id": "1",
      },
    },
    "Menu": Object {
      "1": Menu {
        "food": Food {
          "id": "1",
        },
        "id": "1",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes deep entities with records 3`] = `
Array [
  Menu {
    "food": null,
    "id": "2",
  },
  true,
  false,
  Object {
    "Menu": Object {
      "2": Menu {
        "food": null,
        "id": "2",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes deep entities with records 4`] = `
Array [
  Menu {
    "food": null,
    "id": "2",
  },
  true,
  false,
  Object {
    "Menu": Object {
      "2": Menu {
        "food": null,
        "id": "2",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes recursive dependencies 1`] = `
Array [
  Report {
    "draftedBy": User {
      "id": "456",
      "reports": Array [
        [Circular],
      ],
      "role": "manager",
    },
    "id": "123",
    "publishedBy": User {
      "id": "456",
      "reports": Array [
        [Circular],
      ],
      "role": "manager",
    },
    "title": "Weekly report",
  },
  true,
  false,
  Object {
    "Report": Object {
      "123": Report {
        "draftedBy": User {
          "id": "456",
          "reports": Array [
            [Circular],
          ],
          "role": "manager",
        },
        "id": "123",
        "publishedBy": User {
          "id": "456",
          "reports": Array [
            [Circular],
          ],
          "role": "manager",
        },
        "title": "Weekly report",
      },
    },
    "User": Object {
      "456": User {
        "id": "456",
        "reports": Array [
          Report {
            "draftedBy": [Circular],
            "id": "123",
            "publishedBy": [Circular],
            "title": "Weekly report",
          },
        ],
        "role": "manager",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes recursive dependencies 2`] = `
Array [
  Report {
    "draftedBy": User {
      "id": "456",
      "reports": Immutable.List [
        Immutable.Map {
          "id": "123",
          "title": "Weekly report",
          "draftedBy": "456",
          "publishedBy": "456",
        },
      ],
      "role": "manager",
    },
    "id": "123",
    "publishedBy": User {
      "id": "456",
      "reports": Immutable.List [
        Immutable.Map {
          "id": "123",
          "title": "Weekly report",
          "draftedBy": "456",
          "publishedBy": "456",
        },
      ],
      "role": "manager",
    },
    "title": "Weekly report",
  },
  true,
  false,
  Object {
    "Report": Object {
      "123": Report {
        "draftedBy": User {
          "id": "456",
          "reports": Immutable.List [
            Immutable.Map {
              "id": "123",
              "title": "Weekly report",
              "draftedBy": "456",
              "publishedBy": "456",
            },
          ],
          "role": "manager",
        },
        "id": "123",
        "publishedBy": User {
          "id": "456",
          "reports": Immutable.List [
            Immutable.Map {
              "id": "123",
              "title": "Weekly report",
              "draftedBy": "456",
              "publishedBy": "456",
            },
          ],
          "role": "manager",
        },
        "title": "Weekly report",
      },
    },
    "User": Object {
      "456": User {
        "id": "456",
        "reports": Immutable.List [
          Immutable.Map {
            "id": "123",
            "title": "Weekly report",
            "draftedBy": "456",
            "publishedBy": "456",
          },
        ],
        "role": "manager",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes recursive dependencies 3`] = `
Array [
  User {
    "id": "456",
    "reports": Array [
      Report {
        "draftedBy": [Circular],
        "id": "123",
        "publishedBy": [Circular],
        "title": "Weekly report",
      },
    ],
    "role": "manager",
  },
  true,
  false,
  Object {
    "Report": Object {
      "123": Report {
        "draftedBy": User {
          "id": "456",
          "reports": Array [
            [Circular],
          ],
          "role": "manager",
        },
        "id": "123",
        "publishedBy": User {
          "id": "456",
          "reports": Array [
            [Circular],
          ],
          "role": "manager",
        },
        "title": "Weekly report",
      },
    },
    "User": Object {
      "456": User {
        "id": "456",
        "reports": Array [
          Report {
            "draftedBy": [Circular],
            "id": "123",
            "publishedBy": [Circular],
            "title": "Weekly report",
          },
        ],
        "role": "manager",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes recursive dependencies 4`] = `
Array [
  User {
    "id": "456",
    "reports": Immutable.List [
      Report {
        "draftedBy": Immutable.Map {
          "id": "456",
          "role": "manager",
          "reports": Immutable.List [
            "123",
          ],
        },
        "id": "123",
        "publishedBy": Immutable.Map {
          "id": "456",
          "role": "manager",
          "reports": Immutable.List [
            "123",
          ],
        },
        "title": "Weekly report",
      },
    ],
    "role": "manager",
  },
  true,
  false,
  Object {
    "Report": Object {
      "123": Report {
        "draftedBy": Immutable.Map {
          "id": "456",
          "role": "manager",
          "reports": Immutable.List [
            "123",
          ],
        },
        "id": "123",
        "publishedBy": Immutable.Map {
          "id": "456",
          "role": "manager",
          "reports": Immutable.List [
            "123",
          ],
        },
        "title": "Weekly report",
      },
    },
    "User": Object {
      "456": User {
        "id": "456",
        "reports": Immutable.List [
          Report {
            "draftedBy": Immutable.Map {
              "id": "456",
              "role": "manager",
              "reports": Immutable.List [
                "123",
              ],
            },
            "id": "123",
            "publishedBy": Immutable.Map {
              "id": "456",
              "role": "manager",
              "reports": Immutable.List [
                "123",
              ],
            },
            "title": "Weekly report",
          },
        ],
        "role": "manager",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes to undefined for deleted data 1`] = `
Array [
  Menu {
    "food": undefined,
    "id": "1",
  },
  true,
  true,
  Object {
    "Menu": Object {
      "1": Menu {
        "food": undefined,
        "id": "1",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes to undefined for deleted data 2`] = `
Array [
  Menu {
    "food": undefined,
    "id": "1",
  },
  true,
  true,
  Object {
    "Menu": Object {
      "1": Menu {
        "food": undefined,
        "id": "1",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes to undefined for deleted data 3`] = `
Array [
  undefined,
  true,
  true,
  Object {},
]
`;

exports[`Entity denormalization denormalizes to undefined for deleted data 4`] = `
Array [
  undefined,
  true,
  true,
  Object {},
]
`;

exports[`Entity denormalization denormalizes to undefined for missing data 1`] = `
Array [
  Menu {
    "food": undefined,
    "id": "1",
  },
  true,
  false,
  Object {
    "Menu": Object {
      "1": Menu {
        "food": undefined,
        "id": "1",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes to undefined for missing data 2`] = `
Array [
  Menu {
    "food": undefined,
    "id": "1",
  },
  false,
  false,
  Object {
    "Menu": Object {
      "1": Menu {
        "food": undefined,
        "id": "1",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes to undefined for missing data 3`] = `
Array [
  undefined,
  false,
  false,
  Object {},
]
`;

exports[`Entity denormalization denormalizes to undefined for missing data 4`] = `
Array [
  undefined,
  false,
  false,
  Object {},
]
`;

exports[`Entity normalization mergeStrategy can use a custom merging strategy 1`] = `
Object {
  "entities": Object {
    "MergeTaco": Object {
      "1": MergeTaco {
        "alias": "bar",
        "id": "1",
        "name": "foo",
      },
    },
  },
  "entityMeta": Object {
    "MergeTaco": Object {
      "1": Object {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": Object {},
  "result": Array [
    "1",
    "1",
  ],
}
`;

exports[`Entity normalization mergeStrategy defaults to plain merging 1`] = `
Object {
  "entities": Object {
    "Tacos": Object {
      "1": Tacos {
        "alias": "bar",
        "id": "1",
        "name": "bar",
      },
    },
  },
  "entityMeta": Object {
    "Tacos": Object {
      "1": Object {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": Object {},
  "result": Array [
    "1",
    "1",
  ],
}
`;

exports[`Entity normalization normalizes an entity 1`] = `
Object {
  "entities": Object {
    "MyEntity": Object {
      "1": MyEntity {
        "id": "1",
      },
    },
  },
  "entityMeta": Object {
    "MyEntity": Object {
      "1": Object {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": Object {},
  "result": "1",
}
`;

exports[`Entity normalization pk() can build the entity's ID from the parent object 1`] = `
Object {
  "entities": Object {
    "User": Object {
      "tacos-user-4": User {
        "id": "4",
        "name": "Jimmy",
      },
    },
  },
  "entityMeta": Object {
    "User": Object {
      "tacos-user-4": Object {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": Object {},
  "result": Object {
    "name": "tacos",
    "user": "tacos-user-4",
  },
}
`;

exports[`Entity normalization pk() can normalize entity IDs based on their object key 1`] = `
Object {
  "entities": Object {
    "User": Object {
      "4": User {
        "name": "taco",
      },
      "56": User {
        "name": "burrito",
      },
    },
  },
  "entityMeta": Object {
    "User": Object {
      "4": Object {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
      "56": Object {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": Object {},
  "result": Object {
    "4": Object {
      "id": "4",
      "schema": "users",
    },
    "56": Object {
      "id": "56",
      "schema": "users",
    },
  },
}
`;

exports[`Entity normalization pk() can use a custom pk() string 1`] = `
Object {
  "entities": Object {
    "User": Object {
      "134351": User {
        "idStr": "134351",
        "name": "Kathy",
      },
    },
  },
  "entityMeta": Object {
    "User": Object {
      "134351": Object {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": Object {},
  "result": "134351",
}
`;

exports[`Entity normalization processStrategy can use a custom processing strategy 1`] = `
Object {
  "entities": Object {
    "ProcessTaco": Object {
      "1": ProcessTaco {
        "alias": undefined,
        "id": "1",
        "name": "foo",
        "slug": "thing-1",
      },
    },
  },
  "entityMeta": Object {
    "ProcessTaco": Object {
      "1": Object {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": Object {},
  "result": "1",
}
`;

exports[`Entity normalization processStrategy can use information from the parent in the process strategy 1`] = `
Object {
  "entities": Object {
    "ChildEntity": Object {
      "4": ChildEntity {
        "content": "child",
        "id": "4",
        "parentId": "1",
        "parentKey": "child",
      },
    },
    "ParentEntity": Object {
      "1": ParentEntity {
        "child": "4",
        "content": "parent",
        "id": "1",
      },
    },
  },
  "entityMeta": Object {
    "ChildEntity": Object {
      "4": Object {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
    "ParentEntity": Object {
      "1": Object {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": Object {},
  "result": "1",
}
`;

exports[`Entity normalization processStrategy is run before and passed to the schema normalization 1`] = `
Object {
  "entities": Object {
    "AttachmentsEntity": Object {
      "456": AttachmentsEntity {
        "id": "456",
      },
    },
    "EntriesEntity": Object {
      "123": EntriesEntity {
        "data": Object {
          "attachment": "456",
        },
        "id": "123",
        "type": "message",
      },
    },
  },
  "entityMeta": Object {
    "AttachmentsEntity": Object {
      "456": Object {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
    "EntriesEntity": Object {
      "123": Object {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": Object {},
  "result": "123",
}
`;

exports[`Entity normalization should allow many unexpected as long as none are missing 1`] = `
Object {
  "entities": Object {
    "MyEntity": Object {
      "hi": MyEntity {
        "a": "a",
        "b": "b",
        "c": "c",
        "d": "e",
        "e": 0,
        "f": 0,
        "g": 0,
        "h": 0,
        "i": 0,
        "j": 0,
        "k": 0,
        "l": 0,
        "m": 0,
        "n": 0,
        "name": "hi",
        "o": 0,
        "p": 0,
        "q": 0,
        "r": 0,
        "s": 0,
        "t": 0,
        "u": 0,
      },
    },
  },
  "entityMeta": Object {
    "MyEntity": Object {
      "hi": Object {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": Object {},
  "result": "hi",
}
`;

exports[`Entity normalization should only warn if at least four members are found with unexpected 1`] = `
Object {
  "entities": Object {
    "MyEntity": Object {
      "hi": MyEntity {
        "a": "a",
        "b": "b",
        "c": "c",
        "d": "e",
        "e": 0,
        "f": 0,
        "g": 0,
        "h": 0,
        "i": 0,
        "j": 0,
        "k": 0,
        "l": 0,
        "m": 0,
        "missinga": "",
        "missingb": "",
        "missingc": "",
        "missingd": "",
        "missinge": "",
        "missingf": "",
        "missingg": "",
        "missingh": "",
        "missingi": "",
        "missingj": "",
        "missingk": "",
        "missingl": "",
        "missingm": "",
        "missingn": "",
        "missingo": "",
        "missingp": "",
        "n": 0,
        "name": "hi",
        "o": 0,
        "p": 0,
      },
    },
  },
  "entityMeta": Object {
    "MyEntity": Object {
      "hi": Object {
        "date": 1557831718135,
        "expiresAt": Infinity,
        "fetchedAt": 0,
      },
    },
  },
  "indexes": Object {},
  "result": "hi",
}
`;

exports[`Entity normalization should only warn if at least four members are found with unexpected 2`] = `
Array [
  "Attempted to initialize MyEntity with a large number of unexpected keys found

  This is likely due to a malformed response.
  Try inspecting the network response or fetch() return value.
  Or use debugging tools: https://resthooks.io/docs/guides/debugging
  Learn more about schemas: https://resthooks.io/docs/api/schema
  If this is a mistake, you can disable this check by setting static automaticValidation = 'silent'

  Expected keys:
    Found: name,a,b,c
    Unexpected keys: d,e,f,g,h,i,j,k,l,m,n,o,p
  Value: {
  \\"name\\": \\"hi\\",
  \\"a\\": \\"a\\",
  \\"b\\": \\"b\\",
  \\"c\\": \\"c\\",
  \\"d\\": \\"e\\",
  \\"e\\": 0,
  \\"f\\": 0,
  \\"g\\": 0,
  \\"h\\": 0,
  \\"i\\": 0,
  \\"j\\": 0,
  \\"k\\": 0,
  \\"l\\": 0,
  \\"m\\": 0,
  \\"n\\": 0,
  \\"o\\": 0,
  \\"p\\": 0
}",
]
`;

exports[`Entity normalization should throw a custom error if data does not include pk 1`] = `
"Missing usable primary key when normalizing response.

  This is likely due to a malformed response.
  Try inspecting the network response or fetch() return value.
  Or use debugging tools: https://resthooks.io/docs/guides/debugging
  Learn more about schemas: https://resthooks.io/docs/api/schema

  Entity: MyEntity
  Value: {
  \\"secondthing\\": \\"hi\\"
}
  "
`;

exports[`Entity normalization should throw a custom error if data loads with half unexpected props 1`] = `
"Attempted to initialize MyEntity with a large number of unexpected keys found

  This is likely due to a malformed response.
  Try inspecting the network response or fetch() return value.
  Or use debugging tools: https://resthooks.io/docs/guides/debugging
  Learn more about schemas: https://resthooks.io/docs/api/schema
  If this is a mistake, you can disable this check by setting static automaticValidation = 'silent'

  Expected keys:
    Found: name
    Unexpected keys: nonexistantthing
  Value: {
  \\"name\\": \\"hoho\\",
  \\"nonexistantthing\\": \\"hi\\"
}"
`;

exports[`Entity normalization should throw a custom error if data loads with no matching props 1`] = `
"Attempted to initialize MyEntity with no matching keys found

  This is likely due to a malformed response.
  Try inspecting the network response or fetch() return value.
  Or use debugging tools: https://resthooks.io/docs/guides/debugging
  Learn more about schemas: https://resthooks.io/docs/api/schema
  If this is a mistake, you can disable this check by setting static automaticValidation = 'silent'

  Expected keys:
    Found: 
    Missing: name,secondthing
  Value: {}"
`;

exports[`Entity normalization should throw a custom error if data loads with string 1`] = `
"Unexpected input given to normalize. Expected type to be \\"object\\", found \\"string\\".

          Schema: {
  \\"data\\": {
    \\"name\\": \\"MyEntity\\",
    \\"schema\\": {},
    \\"key\\": \\"MyEntity\\"
  }
}
          Input: \\"hibho\\""
`;

exports[`Entity normalization should throw a custom error if schema key is missing from Entity 1`] = `
"Schema key is missing in Entity

  Be sure all schema members are also part of the entity
  Or use debugging tools: https://resthooks.io/docs/guides/debugging
  Learn more about nesting schemas: https://resthooks.io/docs/guides/nested-response

  Entity keys: name,secondthing
  Schema key(missing): blarb
  "
`;

exports[`Entity normalization should throw a custom error loads with array 1`] = `
"Attempted to initialize MyEntity with an array, but named members were expected

This is likely due to a malformed response.
Try inspecting the network response or fetch() return value.
Or use debugging tools: https://resthooks.io/docs/guides/debugging
Learn more about schemas: https://resthooks.io/docs/api/schema
If this is a mistake, you can disable this check by setting static automaticValidation = 'silent'

Missing: name,secondthing
First three members: [
  {
    \\"name\\": \\"hi\\",
    \\"secondthing\\": \\"ho\\"
  },
  {
    \\"name\\": \\"hi\\",
    \\"secondthing\\": \\"ho\\"
  },
  {
    \\"name\\": \\"hi\\",
    \\"secondthing\\": \\"ho\\"
  }
]"
`;

exports[`Entity normalization should warn when automaticValidation === "warn" 1`] = `
Array [
  "Attempted to initialize MyEntity with an array, but named members were expected

This is likely due to a malformed response.
Try inspecting the network response or fetch() return value.
Or use debugging tools: https://resthooks.io/docs/guides/debugging
Learn more about schemas: https://resthooks.io/docs/api/schema
If this is a mistake, you can disable this check by setting static automaticValidation = 'silent'

Missing: secondthing
First three members: [
  {
    \\"name\\": \\"hi\\",
    \\"secondthing\\": \\"ho\\"
  },
  {
    \\"name\\": \\"hi\\",
    \\"secondthing\\": \\"ho\\"
  },
  {
    \\"name\\": \\"hi\\",
    \\"secondthing\\": \\"ho\\"
  }
]",
]
`;

exports[`Entity normalization should warn when automaticValidation === "warn" 2`] = `
Array [
  "Attempted to initialize MyEntity with a large number of unexpected keys found

  This is likely due to a malformed response.
  Try inspecting the network response or fetch() return value.
  Or use debugging tools: https://resthooks.io/docs/guides/debugging
  Learn more about schemas: https://resthooks.io/docs/api/schema
  If this is a mistake, you can disable this check by setting static automaticValidation = 'silent'

  Expected keys:
    Found: name
    Unexpected keys: nonexistantthing
  Value: {
  \\"name\\": \\"hoho\\",
  \\"nonexistantthing\\": \\"hi\\"
}",
]
`;
